name: Azure Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  ACR_NAME: imageprocessoracr
  RESOURCE_GROUP: image-processor-rg
  BACKEND_IMAGE: backend
  FRONTEND_IMAGE: frontend

jobs:
  build-and-push:
    name: Build and Push to ACR
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Build and push backend image
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.ACR_NAME }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push backend
      run: |
        cd backend
        docker build -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.BACKEND_IMAGE }}:${{ github.sha }} .
        docker build -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.BACKEND_IMAGE }}:latest .
        docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.BACKEND_IMAGE }}:${{ github.sha }}
        docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.BACKEND_IMAGE }}:latest

    - name: Build and push frontend
      run: |
        cd frontend
        docker build -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.FRONTEND_IMAGE }}:${{ github.sha }} .
        docker build -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.FRONTEND_IMAGE }}:latest .
        docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
        docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.FRONTEND_IMAGE }}:latest

  deploy-aci:
    name: Deploy to Azure Container Instances
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'

    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy backend container
      uses: azure/aci-deploy@v1
      with:
        resource-group: ${{ env.RESOURCE_GROUP }}
        dns-name-label: image-processor-backend-staging
        image: ${{ env.ACR_NAME }}.azurecr.io/${{ env.BACKEND_IMAGE }}:${{ github.sha }}
        registry-username: ${{ secrets.ACR_USERNAME }}
        registry-password: ${{ secrets.ACR_PASSWORD }}
        name: backend-staging
        location: eastus
        cpu: 2
        memory: 4
        ports: 3001
        environment-variables: NODE_ENV=production PORT=3001 HOST=0.0.0.0

    - name: Deploy frontend container
      uses: azure/aci-deploy@v1
      with:
        resource-group: ${{ env.RESOURCE_GROUP }}
        dns-name-label: image-processor-frontend-staging
        image: ${{ env.ACR_NAME }}.azurecr.io/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
        registry-username: ${{ secrets.ACR_USERNAME }}
        registry-password: ${{ secrets.ACR_PASSWORD }}
        name: frontend-staging
        location: eastus
        cpu: 1
        memory: 2
        ports: 80

  deploy-appservice:
    name: Deploy to Azure App Service
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy backend to App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: image-processor-backend-api
        images: ${{ env.ACR_NAME }}.azurecr.io/${{ env.BACKEND_IMAGE }}:${{ github.sha }}

    - name: Deploy frontend to App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: image-processor-frontend
        images: ${{ env.ACR_NAME }}.azurecr.io/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}

  deploy-aks:
    name: Deploy to Azure Kubernetes Service
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ env.RESOURCE_GROUP }}
        cluster-name: image-processor-aks

    - name: Create namespace if not exists
      run: |
        kubectl create namespace image-processor --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy to AKS
      uses: azure/k8s-deploy@v4
      with:
        namespace: image-processor
        manifests: |
          azure/k8s/configmap.yaml
          azure/k8s/persistent-volume.yaml
          azure/k8s/backend-deployment.yaml
          azure/k8s/frontend-deployment.yaml
          azure/k8s/hpa.yaml
        images: |
          ${{ env.ACR_NAME }}.azurecr.io/${{ env.BACKEND_IMAGE }}:${{ github.sha }}
          ${{ env.ACR_NAME }}.azurecr.io/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}

    - name: Verify deployment
      run: |
        kubectl rollout status deployment/backend -n image-processor
        kubectl rollout status deployment/frontend -n image-processor
        kubectl get pods -n image-processor
        kubectl get services -n image-processor

  notify:
    name: Notify deployment status
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-appservice]
    if: always()

    steps:
    - name: Deployment notification
      run: |
        if [ "${{ needs.deploy-appservice.result }}" == "success" ]; then
          echo "✅ Deployment successful!"
          echo "Frontend: https://image-processor-frontend.azurewebsites.net"
          echo "Backend: https://image-processor-backend-api.azurewebsites.net"
        else
          echo "❌ Deployment failed!"
        fi
